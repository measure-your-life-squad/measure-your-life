openapi: '3.0.0'
info:
  title: MYL REST API
  description: This is OpenAPI definition of REST API for the Measure-Your-Life project.
  version: 0.9.0
  contact:
    url: 'https://github.com/measure-your-life-squad/measure-your-life'
  license:
    name: MIT
    url: >-
      https://github.com/measure-your-life-squad/measure-your-life/blob/develop/LICENSE
servers:
  - url: http://localhost:80
    description: For local API development purposes
  - url: http://150.254.30.252:80
    description: Public IP development server
tags:
  - name: root
    description: root endpoint of the webserver
  - name: users
    description: Operations about users
  - name: activities
    description: Operations about activities
  - name: categories
    description: Operations about categories
paths:
  /:
    get:
      tags:
        - root
      summary: Returns a hello message from the server
      operationId: apis.root.hello
      responses:
        '200':
          description: Hello message from the server
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Hello from Python backend server"
  /api/users/register:
    post:
      tags:
        - users
      summary: Register a new user
      operationId: apis.users.signup_user
      requestBody:
        required: True
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                  example: <user name>
                password:
                  type: string
                  example: <user password>
                email:
                  type: string
                  example: tom@example.com
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: registered successfuly
                  user_id:
                    type: string
                    example: <user UUID>
        default:
          description: Unexpected error
  /api/users/login:
    post:
      tags:
        - users
      summary: Login an existing user
      operationId: apis.users.login_user
      security:
        - BasicAuth: []
      responses:
        '200':
          description: Successful login operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  token:
                    type: string
                    example: <JWT token>
                  email_confirmed:
                    type: boolean
                    example: false
        '401':
          description: Failed login operation
          headers:
            WWW.Authentication: 
              schema: 
                type: string
                example: Basic realm 'login required'
              description: Authentication status
          content:
            text/html:
              schema:
                type: string
                example: could not verify
  /api/users/confirmation_email:
    get:
      tags:
        - users
      summary: Use email confirmation url and verify user account 
      operationId: apis.users.confirm_email
      parameters:
        - in: query
          name: token
          description: Email verification token
          schema:
            type: string
          required: true
      responses:
        '200':
          description: Returns a message notifying about user email address verification
          content: 
            text/html:
              schema:
                type: string
    post:
      tags:
        - users
      summary: Resend email confirmation url to user's email address
      operationId: apis.users.resend_confirmation_email
      requestBody:
        required: True
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: "#/components/schemas/email_confirmation"
      responses:
        '200':
          description: Returns a message notifying about user email address verification
          content: 
            text/html:
              schema:
                type: string
  /api/users:
    get:
      tags:
        - users
      summary: Get all registered users
      operationId: apis.users.get_all_users
      security:
        - jwt: ['admin']
      responses:
        '200':
          description: Returns a list of registered users. API Key bearer needs admin privileges.
          content:
            application/json:
              schema:
                type: object
                properties:
                  users:
                    type: array
                    items:
                      $ref: "#/components/schemas/user"
        '401':
          description: Failed operation due to lack of sufficient privileges.
          content:
            text/html:
              schema:
                type: string
                example: unathorized
  /api/activities:
    post:
      tags:
        - activities
      summary: Save an activity record
      operationId: apis.activities.create_activity
      security:
        - jwt: ['user']
      requestBody:
        required: True
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/activity"
      responses:
        '200':
          description: Saves a record of user's activity.
          content:
            application/json:
              schema:
                type: object
                properties:
                  activity_id:
                    type: string
                    example: 4f175f70-d192-42a4-bd74-6f5b5baf7963
        '422':
          description: Posted activity time is overlapping with already stored activities
          content:
            application/json:
              schema:
                type: object
                properties:
                   message:
                    type: string
                    example: Time overalapping with already stored activities
        default:
          description: Unexpected error
    get:
      tags:
        - activities
      summary: Get user activity records
      operationId: apis.activities.get_user_activities
      security: 
        - jwt: ['user']
      responses:
        '200':
          description: Retrieves a list of all activity records of a user
          content:
            application/json:
              schema:
                type: object
                properties:
                  activities:
                    type: array
                    items:
                      $ref: "#/components/schemas/activity"
    delete:
      tags:
        - activities
      summary: Delete a user activity record
      operationId: apis.activities.delete_user_activity
      security:
        - jwt: ['user']
      parameters:
        - in: query
          name: activity_id
          description: Activity ID that needs to be deleted
          schema:
            type: string
          required: true
      responses:
        '200':
          description: Deletes an activity with provided activity id
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Activity 4f175f70-d192-42a4-bd74-6f5b5baf7963 successfully deleted
    put:
      tags:
        - activities
      summary: Edits a user activity record with data provided in payload
      operationId: apis.activities.edit_user_activity
      security:
        - jwt: ['user']
      parameters:
        - in: query
          name: activity_id
          description: Activity ID that needs to be updated
          schema:
            type: string
          required: true
      requestBody:
        required: True
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/activity"
      responses:
        '200':
          description: Updates an activity with provided data
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Activity 4f175f70-d192-42a4-bd74-6f5b5baf7963 successfully updated
  /api/statistics/meter:
    get:
      tags:
        - statistics
      summary: Get rolling Work-Duties-Leisure meter
      operationId: apis.statistics.get_rolling_meter
      security:
        - jwt: ['user']
      parameters:
        - in: query
          name: include_unassigned
          description: Boolean parameter to specify if include unassigned in calculation
          schema:
            type: boolean
          required: false
        - in: query
          name: start_range
          description: Parameter to specify the start date of the calculation
          schema:
            type: string
          required: false
        - in: query
          name: end_range
          description: Parameter to specify the end date of the calculation
          schema:
            type: string
          required: false
      responses:
        '200':
          description: Returns a rolling Work-Duties-Leisure meter
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/wdl_meter"
  /api/statistics/oldest:
    get:
      tags:
        - statistics
      summary: Get the oldest activity start date for a user
      operationId: apis.statistics.get_oldest_date
      security:
        - jwt: ['user']
      responses:
        '200':
          description: Returns the oldest activity start date for a user in ISO-8601 UTC
          content:
            application/json:
              schema:
                type: object
                properties:
                  oldest_date:
                    type: string
                    example: "2020-03-15T15:27:44,098807487+00:00"
  /api/categories:
    get:
      tags:
        - categories
      summary: Get available categories
      operationId: apis.categories.get_available_categories
      security:
        - jwt: ['user']
      responses:
        '200':
          description: Retrieves a list of all available categories
          content:
            application/json:
              schema:
                type: object
                properties:
                  categories:
                    type: array
                    items:
                      $ref: "#/components/schemas/category"
components:
  securitySchemes:
    BasicAuth:
      type: http
      scheme: basic
      x-basicInfoFunc: api_utils.auth_utils.basic_auth
    jwt:
      type: http
      scheme: bearer
      bearerFormat: JWT
      x-bearerInfoFunc: api_utils.auth_utils.decode_token
  schemas:
    user:
      type: object
      properties:
        admin:
          type: string
          example: false
        name:
          type: string
          example: Tom
        public_id:
          type: string
          example: 1130cae9-cbd1-4afe-ac94-d939b7fb4cfa
        email:
          type: string
          example: tom@example.com
    email_confirmation:
      type: object
      properties:
        email:
          type: string
          example: example@email.com
    activity:
      type: object
      properties:
        activity_end: 
          type: string
          description: Datetime in ISO-8601 format
          example: "2020-03-15T15:27:44,098807487+01:00"
        activity_start:
          type: string
          description: Datetime in ISO-8601 format
          example: "2020-03-15T14:58:45,127086327+01:00"
        name: 
          type: string
          description: Activity name
          example: Programming
        category_id:
          type: string
          description: Category ID
          example: 1
    wdl_meter:
      type: object
      properties:
        work_portion:
          type: float
          description: Work share in provided activities
          example: 0.65
    category:
      type: object
      properties:
        id:
          type: string
          description: Category ID, referenced in Activity
          example: 1
        name:
          type: string
          description: Category name
          example: work
        icon_name:
          type: string
          description: Category icon name
          example: work_icon